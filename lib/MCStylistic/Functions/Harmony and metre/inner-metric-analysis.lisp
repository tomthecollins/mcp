#| Copyright 2008-2013 Tom Collins
   Thursday 28 April 2011
   Incomplete

\noindent Implementation of Inner Metric Analysis as
described by \citet{volk2008}. Inner Metric Analysis is
based the concept of a local metre, which is defined as
a set of `equally spaced onsets$\ldots$[that] contains
at least three onsets and is maximal, meaning that it is
not a subset of any other subset consisting of equally
distanced onsets' \citep[][p.~261]{volk2008}.

I noticed a relationship between local metres and
maximal translatable patterns, which is exploited in
this implementation. As the latter are coded for
datasets of dimension greater than or equal to one (not
just the set of onsets), it is possible to calculate
local metres in more than one dimension using the
functions below.

It should be noted that this implementation requires
improvement, as some of the output metres are not local
metres: consider for example, the metres
$((8) (2) 3 (2))$ and $((4) (2) 7 (2))$. The first is a
subset of the second, so the first is not a local metre.
But both will be output here, because they are
generated by different MTPs (MTP of 8 and 4
respectively).

; REQUIRED PACKAGES:
; (in-package :common-lisp-user)
(load
 (merge-pathnames
  (make-pathname
   :directory '(:relative "Maths foundation")
   :name "list-processing"
   :type "lisp")
  *MCStylistic-MonthYear-functions-path*))
(load
 (merge-pathnames
  (make-pathname
   :directory '(:relative "Maths foundation")
   :name "stats-sampling"
   :type "lisp")
  *MCStylistic-MonthYear-functions-path*))
(load
 (merge-pathnames
  (make-pathname
   :directory '(:relative "Pattern discovery")
   :name "structural-induction-merge"
   :type "lisp")
  *MCStylistic-MonthYear-functions-path*))
(load
 (merge-pathnames
  (make-pathname
   :directory '(:relative "Pattern discovery")
   :name "superdiagonals"
   :type "lisp")
  *MCStylistic-MonthYear-functions-path*))
(load
 (merge-pathnames
  (make-pathname
   :directory '(:relative "File conversion")
   :name "text-files"
   :type "lisp")
  *MCStylistic-MonthYear-functions-path*))
|#

#|
\noindent Example:
\begin{verbatim}
(expand-local-metre '((4) (2) 7 (2)))
--> '((2) (6) (10) (14) (18) (22) (26) (30))
\end{verbatim}

\noindent This function expands a local metre
\citep{volk2008} into a list of member ontimes. The
format of the local metre is: period vector (or d in
Volk's \citeyear{volk2008}); first member (or s); length
in the MTP (or k); a list of phases (or ph). In this
explanation, the term onsets has been used, but in fact
this code generalises to multiple-dimension local
metres. |#

(defun expand-local-metre
       (local-metre &optional (i 0))
  (if (> i (third local-metre)) ()
    (cons
     (add-two-lists
      (second local-metre)
      (multiply-list-by-constant
       (first local-metre) i))
     (expand-local-metre local-metre (+ i 1)))))

#|
\noindent Example:
\begin{verbatim}
(setq
 expanded-local-metres
 '(((0) (1) (2)) ((8) (9) (10)) ((16) (17) (18))
   ((24) (25) (26)) ((6) (8) (10)) ((14) (16) (18))
   ((22) (24) (26))
   ((2) (6) (10) (14) (18) (22) (26) (30))
   ((2) (8) (14)) ((10) (16) (22))
   ((18) (24) (30)) ((2) (9) (16)) ((10) (17) (24))
   ((0) (8) (16) (24)) ((1) (9) (17) (25))
   ((2) (10) (18) (26)) ((6) (14) (22) (30))
   ((0) (9) (18)) ((8) (17) (26)) ((6) (16) (26))
   ((2) (14) (26)) ((6) (18) (30)) ((2) (16) (30))))
(general-metric-weight '(9) expanded-local-metres)
--> 21
(general-metric-weight '(10) expanded-local-metres)
--> 74
\end{verbatim}

\noindent This function calculates the general metric
weight \citep{volk2008} of an onset in a set of onsets.
It is the sum over all local metres (of minimum length
specifiable by $l$) of which the onset is a member, and
the summand is $\kappa^p$, where $\kappa$ is the length
of the local metre in question, and $p = 2$ is a
parameter. In this explanation, the term onsets has been
used, but in fact this code generalises to multiple-
dimension local metres. |#

(defun general-metric-weight
       (on expanded-local-metres &optional (l 2) (p 2)
	(summands
	 (mapcar
	  #'(lambda (x)
	      (if (and
		   (> (length x) l)
		   (find on x :test #'equalp))
		(expt (- (length x) 1) p) 0))
	  expanded-local-metres)))
  (my-last (fibonacci-list summands)))

#|
\noindent Example:
\begin{verbatim}
Dataset defined as in the function local-metres-via-SIA.
(setq
 fpath
 (merge-pathnames
  (make-pathname
   :directory '(:relative "Example files"))
  *MCStylistic-MonthYear-functions-path*))
(setq fname "schubertOp94No4")
(general-metric-weights dataset fpath fname)
--> (((0) (1) (2) (6) (8) (9) (10) (14) (16) (17) (18)
      (22) (24) (25) (26) (30))
     (17 13 78 70 25 21 74 70 33 21 78 66 25 13 78 70))
\end{verbatim}

\noindent This function calculates the general metric
weights \citep{volk2008} of onsets in a dataset. It
returns two lists: one containing the onsets, and the
other the corresponding metric weights. Please see the
functions local-metres-via-SIA and general-metric-weight
for more details. The default parameters of minimum
length $l = 2$ and exponent $p = 2$ are as in
\citet{volk2008}. In this explanation, the term onsets
has been used, but in fact this code generalises to
multiple-dimension local metres. |#

(defun general-metric-weights
       (dataset fpath fname &optional (min-length 2)
	(p 2) (projection-list (list 1))
	(projected-dataset
         (if projection-list
           (orthogonal-projection-unique-equalp
            dataset projection-list) dataset))
	(local-metres
	 (progn
	   (local-metres-via-SIA
	    dataset fpath fname min-length
	    projection-list projected-dataset)
	   (read-from-file
            (merge-pathnames
	     (make-pathname
	      :name (concatenate 'string fname " LM")
	      :type "txt")
	     fpath))))
	(local-metres-expanded
	 (mapcar
	  #'(lambda (x)
	      (expand-local-metre x)) local-metres)))
  (list
   projected-dataset
   (mapcar
    #'(lambda (x)
	(general-metric-weight
	 x local-metres-expanded min-length p))
    projected-dataset)))

#|
\noindent Example:
\begin{verbatim}
(setq
 dataset
 '((0 49 54 2 0) (0 56 58 2 0) (0 61 61 2 0)
   (0 65 63 1 1) (1 68 65 1 1) (2 49 54 4 0)
   (2 56 58 4 0) (2 61 61 4 0) (2 66 64 4 1)
   (2 70 66 4 1) (6 49 54 2 0) (6 56 58 2 0)
   (6 61 61 2 0) (6 65 63 2 1) (6 68 65 2 1)
   (8 49 54 2 0) (8 56 58 2 0) (8 61 61 2 0)
   (8 65 63 1 1) (9 68 65 1 1) (10 49 54 4 0)
   (10 56 58 4 0) (10 61 61 4 0) (10 66 64 4 1)
   (10 70 66 4 1) (10 73 68 4 1) (14 49 54 2 0)
   (14 56 58 2 0) (14 61 61 2 0) (14 65 63 2 1)
   (14 68 65 2 1) (16 56 58 2 0) (16 60 60 2 0)
   (16 65 63 1 1) (16 68 65 1 1) (17 62 61 1 1)
   (18 56 58 4 0) (18 60 60 4 0) (18 63 62 4 1)
   (18 66 64 4 1) (22 56 58 2 0) (22 60 60 2 0)
   (22 66 64 2 1) (22 75 69 2 1) (24 49 54 2 0)
   (24 56 58 2 0) (24 61 61 2 0) (24 68 65 1 1)
   (24 77 70 1 1) (25 66 64 1 1) (25 75 69 1 1)
   (26 49 54 4 0) (26 56 58 4 0) (26 61 61 4 0)
   (26 65 63 4 1) (26 73 68 4 1) (30 49 54 2 0)
   (30 56 58 2 0) (30 61 61 2 0) (30 65 63 2 1)
   (30 68 65 2 1)))
(setq
 fpath
 (merge-pathnames
  (make-pathname
   :directory '(:relative "Example files"))
  *MCStylistic-MonthYear-functions-path*))
(setq fname "schubertOp94No4")
(local-metres-via-SIA dataset fpath fname)
--> text file containing local metres in specified
location:
(((1) (0) 2 (0)) ((1) (8) 2 (0)) ((1) (16) 2 (0))
 ((1) (24) 2 (0)) ((2) (6) 2 (0)) ((2) (14) 2 (0))
 ((2) (22) 2 (0)) ((4) (2) 7 (2)) ((6) (2) 2 (2))
 ((6) (10) 2 (4)) ((6) (18) 2 (0)) ((7) (2) 2 (2))
 ((7) (10) 2 (3)) ((8) (0) 3 (0)) ((8) (1) 3 (1))
 ((8) (2) 3 (2)) ((8) (6) 3 (6)) ((9) (0) 2 (0))
 ((9) (8) 2 (8)) ((10) (6) 2 (6)) ((12) (2) 2 (2))
 ((12) (6) 2 (6)) ((14) (2) 2 (2)))
\end{verbatim}

\noindent This function returns a list of local metres
\citep{volk2008} for a dataset under a specified
projection. Each local metre that has a length k of
greater than or equal to the optional variable
min-length is returned as a list in the format:
period vector (or d in Volk's \citeyear{volk2008}
paper); first member (or s); length in the MTP (or k);
a list of phases (or ph). A relationship between local
metres and maximal translatable patterns was observed,
hence the use of SIA.

NB Comparison with \citet{volk2008} suggests that four
local metres are missing from the Schubert example:
((8) (2) 3 (2)), ((8) (6) 3 (6)), ((12) (2) 2 (2)),
and ((12) (6) 2 (6)). |#

(defun local-metres-via-SIA
       (dataset fpath fname &optional (min-length 2)
        (projection-list (list 1))
        (projected-dataset
         (if projection-list
           (orthogonal-projection-unique-equalp
            dataset projection-list) dataset))
	(SIA-path&name
	 (merge-pathnames
	  (make-pathname
	   :name (concatenate 'string fname " SIA")
	   :type "txt")
	  fpath))
	(SIA-output
         (progn
           (SIA-reflected-merge-sort
            projected-dataset SIA-path&name)
           (read-from-file SIA-path&name))))
  (write-to-file
   (vector-MTP-pairs2local-metres
    SIA-output min-length)
   (merge-pathnames
    (make-pathname
     :name (concatenate 'string fname " LM")
     :type "txt")
    fpath)))

#|
\noindent Example:
\begin{verbatim}
(setq
 metric-weights
 '(17 13 78 70 25 21 74 70 33 21 78 66 25 13 78 70))
(normalise-metric-weights-by-quartiles metric-weights)
--> (1 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3)
\end{verbatim}

\noindent This function takes a list (of metric weights)
as input. It calculates the lower, median, and upper
quartiles of the list. Then it outputs a list of the
same length as the argument, where each metric weight
has been assigned a number 1-4, indicating whether it is
in the min-lower, lower-median, median-upper, or median-
max quartile. |#

(defun normalise-metric-weights-by-quartiles
       (metric-weights &optional
	(w-quartiles (quartiles metric-weights)))
  (mapcar
   #'(lambda (x)
       (if (<= x (first w-quartiles)) 1
	 (if (and
	      (> x (first w-quartiles))
	      (<= x (second w-quartiles))) 2
	   (if (and
		(> x (second w-quartiles))
		(<= x (third w-quartiles))) 3
	     (if (> x (third w-quartiles)) 4)))))
   metric-weights))

#|
\noindent Example:
\begin{verbatim}
(vector-MTP-pair2local-metres
 '((2) (0) (6) (7) (8) (9) (11) (14) (16) (22) (24)))
--> '(((2) (6) 2 (0)) ((2) (7) 3 (1)) ((2) (14) 2 (0))
      ((2) (22) 2 (0)))
(vector-MTP-pair2local-metres
 '((2 1) (0 54) (6 60) (8 61) (14 60) (16 61) (22 60)
   (24 61)))
--> '(((2 1) (6 60) 2 (0 0)) ((2 1) (14 60) 2 (0 0))
      ((2 1) (22 60) 2 (0 0))
\end{verbatim}

\noindent This function takes a vector-MTP pair as its
only mandatory argument. It parses the MTP for local
metres. Each local metre that has a length of greater
than or equal to the optional variable min-length is
returned as a list in the format: period vector (or d
in Volk's \citeyear{volk2008} paper); first member (or
s); length in the MTP (or k); a list of phases (or
ph). |#

(defun vector-MTP-pair2local-metres
       (vector-MTP-pair &optional (min-length 2)
        (period-vector-d (car vector-MTP-pair))
        (MTP (cdr vector-MTP-pair))
        (growing-list nil)
        (i 1) ; Increment for probe > candidate-member
        (k 1) ; Increment over length of metre in MTP.
        (first-member-s (first MTP))
        (probe
         (if first-member-s
           (add-two-lists
            first-member-s period-vector-d)))
        (candidate-member (nth i MTP)))
  (if (null MTP)
    (if (< k min-length) growing-list
      (append
       growing-list
       (list
        (list
         period-vector-d first-member-s k
         (mapcar
          #'(lambda (x y)
	      (if (> y 0) (mod x y) 0))
          first-member-s period-vector-d)))))
    (if (or
         (null candidate-member)
         (vector<vector-t-or-nil
          probe candidate-member))
      (vector-MTP-pair2local-metres
       vector-MTP-pair min-length period-vector-d
       (rest MTP)
       (if (< k min-length) growing-list
        (append
         growing-list
         (list
          (list
           period-vector-d first-member-s k
           (mapcar
            #'(lambda (x y)
	      (if (> y 0) (mod x y) 0))
            first-member-s period-vector-d))))))
      (if (equalp probe candidate-member)
        (vector-MTP-pair2local-metres
         vector-MTP-pair min-length period-vector-d
         (remove candidate-member MTP :test #'equalp)
         growing-list i (+ k 1) first-member-s
         (add-two-lists probe period-vector-d))
        (vector-MTP-pair2local-metres
         vector-MTP-pair min-length period-vector-d
         MTP growing-list (+ i 1) k first-member-s
         probe)))))

#|
\noindent Example:
\begin{verbatim}
(vector-MTP-pairs2local-metres
 '(((2) (0) (6) (7) (8) (9) (11) (14) (16) (22) (24))
   ((6) (0) (2) (8) (10) (16) (18) (24))))
--> '(((2) (6) 2 (0)) ((2) (7) 3 (1)) ((2) (14) 2 (0))
      ((2) (22) 2 (0)) ((6) (2) 2 (2))
      ((6) (10) 2 (4)) ((6) (18) 2 (0)))
\end{verbatim}

\noindent This function applies the function vector-
MTP-pair2local-metres recursively to members of a
list. The output is a flat list, in the sense that
successive applications are appended. |#

(defun vector-MTP-pairs2local-metres
       (vector-MTP-pairs &optional (min-length 2))
  (if (null vector-MTP-pairs) ()
    (append
     (vector-MTP-pair2local-metres
      (first vector-MTP-pairs) min-length)
     (vector-MTP-pairs2local-metres
      (rest vector-MTP-pairs) min-length))))

